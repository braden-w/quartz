/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

/**
 * Use as compareFn in sort
 */
const sorter = (toOrdered, order = "asc") => {
    return (a, b) => order === "asc"
        ? toOrdered(a) > toOrdered(b)
            ? 1
            : toOrdered(b) > toOrdered(a)
                ? -1
                : 0
        : toOrdered(a) < toOrdered(b)
            ? 1
            : toOrdered(b) < toOrdered(a)
                ? -1
                : 0;
};
const keyBy = (values, toKey) => values.reduce((prev, cur, _1, _2, k = toKey(cur)) => ((prev[k] = cur), prev), {});
const count = (values) => {
    const ret = {};
    for (const value of values) {
        if (ret[value]) {
            ret[value]++;
        }
        else {
            ret[value] = 1;
        }
    }
    return ret;
};
function flatten(matrix) {
    return matrix.reduce((a, c) => [...a, ...c], []);
}
function uniq(values) {
    return [...new Set(values)];
}
function uniqFlatMap(values, mapper) {
    return uniq(flatten(values.map(mapper)));
}
const minBy = (collection, toNum) => {
    const select = (a, b) => (toNum(a) <= toNum(b) ? a : b);
    return collection.reduce(select);
};
function ignoreItems(items, patternsSeparatedLineBreak, toPath) {
    const ps = patternsSeparatedLineBreak.split("\n").filter((x) => x);
    return ps.length === 0
        ? items
        : items.filter((x) => !ps.some((p) => toPath(x).startsWith(p)));
}
function mirrorMap(collection, toValue) {
    return collection.reduce((p, c) => (Object.assign(Object.assign({}, p), { [toValue(c)]: toValue(c) })), {});
}

function basename(path, ext) {
    var _a, _b;
    const name = (_b = (_a = path.match(/.+[\\/]([^\\/]+)[\\/]?$/)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : path;
    return ext && name.endsWith(ext) ? name.replace(ext, "") : name;
}
function extname(path) {
    const ext = basename(path).split(".").slice(1).pop();
    return ext ? `.${ext}` : "";
}
function dirname(path) {
    var _a, _b;
    return (_b = (_a = path.match(/(.+)[\\/].+$/)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : ".";
}

class AppHelper {
    constructor(app) {
        this.unsafeApp = app;
    }
    getActiveFile() {
        return this.unsafeApp.workspace.getActiveFile();
    }
    getMarkdownViewInActiveLeaf() {
        if (!this.unsafeApp.workspace.getActiveViewOfType(obsidian.MarkdownView)) {
            return null;
        }
        return this.unsafeApp.workspace.activeLeaf.view;
    }
    getCurrentEditor() {
        var _a, _b;
        return (_b = (_a = this.getMarkdownViewInActiveLeaf()) === null || _a === void 0 ? void 0 : _a.editor) !== null && _b !== void 0 ? _b : null;
    }
    getCurrentOffset() {
        var _a;
        const editor = this.getCurrentEditor();
        if (!editor) {
            return null;
        }
        const cursor = (_a = this.getCurrentEditor()) === null || _a === void 0 ? void 0 : _a.getCursor();
        if (!cursor) {
            return null;
        }
        return editor.posToOffset(cursor);
    }
    getHeadersInActiveFile() {
        var _a, _b;
        const activeFile = this.getActiveFile();
        if (!activeFile) {
            return [];
        }
        return ((_b = (_a = this.unsafeApp.metadataCache.getFileCache(activeFile)) === null || _a === void 0 ? void 0 : _a.headings) !== null && _b !== void 0 ? _b : []);
    }
    getFolders() {
        return this.unsafeApp.vault
            .getAllLoadedFiles()
            .filter((x) => x instanceof obsidian.TFolder);
    }
    getLayout() {
        return this.unsafeApp.workspace.getLayout();
    }
    getLeftSideBarWidth() {
        return this.getLayout().left.collapsed ? 0 : this.getLayout().left.width;
    }
    getRightSideBarWidth() {
        return this.getLayout().right.collapsed ? 0 : this.getLayout().right.width;
    }
    findExternalLinkUrls(file) {
        return __awaiter(this, void 0, void 0, function* () {
            const content = yield this.unsafeApp.vault.read(file);
            const matches = Array.from(content.matchAll(/https?:\/\/.+/g));
            return matches.map((x) => x[0]);
        });
    }
    findFirstLinkOffset(file, linkFile) {
        var _a, _b;
        const fileCache = this.unsafeApp.metadataCache.getFileCache(file);
        const links = (_a = fileCache === null || fileCache === void 0 ? void 0 : fileCache.links) !== null && _a !== void 0 ? _a : [];
        const embeds = (_b = fileCache === null || fileCache === void 0 ? void 0 : fileCache.embeds) !== null && _b !== void 0 ? _b : [];
        return [...links, ...embeds].find((x) => {
            var _a;
            const toLinkFilePath = (_a = this.unsafeApp.metadataCache.getFirstLinkpathDest(obsidian.getLinkpath(x.link), file.path)) === null || _a === void 0 ? void 0 : _a.path;
            return toLinkFilePath === linkFile.path;
        }).position.start.offset;
    }
    // noinspection FunctionWithMultipleLoopsJS
    createBacklinksMap() {
        const backLinksMap = {};
        for (const [filePath, linkMap] of Object.entries(this.unsafeApp.metadataCache.resolvedLinks)) {
            for (const linkPath of Object.keys(linkMap)) {
                if (!backLinksMap[linkPath]) {
                    backLinksMap[linkPath] = new Set();
                }
                backLinksMap[linkPath].add(filePath);
            }
        }
        return backLinksMap;
    }
    moveTo(to, editor) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const isToOffset = typeof to === "number";
            const activeFile = this.getActiveFile();
            const activeLeaf = this.unsafeApp.workspace.activeLeaf;
            if (!activeFile || !activeLeaf) {
                return;
            }
            const subView = (_a = this.getMarkdownViewInActiveLeaf()) === null || _a === void 0 ? void 0 : _a.currentMode;
            if (!subView) {
                return;
            }
            const targetEditor = editor !== null && editor !== void 0 ? editor : this.getCurrentEditor();
            if (!targetEditor) {
                return;
            }
            const line = isToOffset ? targetEditor.offsetToPos(to).line : to.start.line;
            targetEditor.setCursor(targetEditor.offsetToPos(isToOffset ? to : to.start.offset));
            yield activeLeaf.openFile(activeFile, {
                eState: {
                    line,
                },
                active: false,
            });
        });
    }
    openMarkdownFile(file, option = {}) {
        const opt = Object.assign({ leaf: "same", offset: 0 }, option);
        const openFile = (leaf) => {
            var _a;
            leaf
                .openFile(file, (_a = this.unsafeApp.workspace.activeLeaf) === null || _a === void 0 ? void 0 : _a.getViewState())
                .then(() => {
                this.unsafeApp.workspace.setActiveLeaf(leaf, true, true);
                const markdownView = this.unsafeApp.workspace.getActiveViewOfType(obsidian.MarkdownView);
                if (markdownView && opt.offset > 0) {
                    this.moveTo(opt.offset, markdownView.editor);
                }
            });
        };
        let leaf;
        switch (opt.leaf) {
            case "same":
                leaf = this.unsafeApp.workspace.getLeaf();
                openFile(leaf);
                break;
            case "new":
                leaf = this.unsafeApp.workspace.getLeaf(true);
                openFile(leaf);
                break;
            case "new-horizontal":
                leaf = this.unsafeApp.workspace.getLeaf(true, "horizontal");
                openFile(leaf);
                break;
            case "new-vertical":
                leaf = this.unsafeApp.workspace.getLeaf(true, "vertical");
                openFile(leaf);
                break;
            case "popout":
                openFile(this.unsafeApp.workspace.openPopoutLeaf());
                break;
            case "popup":
                const hoverEditorInstance = this.unsafeApp.plugins.plugins["obsidian-hover-editor"];
                if (hoverEditorInstance) {
                    leaf = hoverEditorInstance.spawnPopover(undefined, () => {
                        openFile(leaf);
                    });
                }
                else {
                    openFile(this.unsafeApp.workspace.getLeaf());
                }
                break;
        }
    }
    getStarredFilePaths() {
        return this.unsafeApp.internalPlugins.plugins.starred.instance.items.map((x) => x.path);
    }
    searchPhantomFiles() {
        return uniq(flatten(Object.values(this.unsafeApp.metadataCache.unresolvedLinks).map(Object.keys))).map((x) => this.createPhantomFile(x));
    }
    insertLinkToActiveFileBy(file) {
        const activeMarkdownView = this.unsafeApp.workspace.getActiveViewOfType(obsidian.MarkdownView);
        if (!activeMarkdownView) {
            return;
        }
        const linkText = this.unsafeApp.fileManager.generateMarkdownLink(file, activeMarkdownView.file.path);
        const editor = activeMarkdownView.editor;
        editor.replaceSelection(linkText);
    }
    createMarkdown(linkText) {
        return __awaiter(this, void 0, void 0, function* () {
            const linkPath = this.getPathToBeCreated(linkText);
            if (yield this.exists(linkPath)) {
                return null;
            }
            const dir = dirname(linkPath);
            if (!(yield this.exists(dir))) {
                yield this.unsafeApp.vault.createFolder(dir);
            }
            return this.unsafeApp.vault.create(linkPath, "");
        });
    }
    exists(normalizedPath) {
        return this.unsafeApp.vault.adapter.exists(normalizedPath);
    }
    isPopWindow() {
        // XXX: Hacky implementation!!
        return !fish(".modal-bg");
    }
    getPathToBeCreated(linkText) {
        var _a, _b;
        let linkPath = obsidian.getLinkpath(linkText);
        if (extname(linkPath) !== ".md") {
            linkPath += ".md";
        }
        if (linkPath.includes("/")) {
            return linkPath;
        }
        switch (this.unsafeApp.vault.config.newFileLocation) {
            case "root":
                return `/${linkPath}`;
            case "current":
                return `${(_b = (_a = this.getActiveFile()) === null || _a === void 0 ? void 0 : _a.parent.path) !== null && _b !== void 0 ? _b : ""}/${linkPath}`;
            case "folder":
                return `${this.unsafeApp.vault.config.newFileFolderPath}/${linkPath}`;
            default:
                // Normally, same as the "root"
                return `/${linkPath}`;
        }
    }
    // TODO: Use another interface instead of TFile
    createPhantomFile(linkText) {
        const linkPath = this.getPathToBeCreated(linkText);
        // @ts-ignore
        return {
            path: linkPath,
            name: basename(linkPath),
            vault: this.unsafeApp.vault,
            extension: "md",
            basename: basename(linkPath, ".md"),
            parent: {
                name: basename(dirname(linkPath)),
                path: dirname(linkPath),
                vault: this.unsafeApp.vault,
                // XXX: From here, Untrusted properties
                children: [],
                // @ts-ignore
                parent: null,
                isRoot: () => true,
            },
            stat: {
                mtime: 0,
                ctime: 0,
                size: 0,
            },
        };
    }
}

/*
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
/*
Note: Customized for TypeScript
 */
const defaultDiacriticsRemovalMap = [
    {
        base: "A",
        letters: "\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F",
    },
    { base: "AA", letters: "\uA732" },
    { base: "AE", letters: "\u00C6\u01FC\u01E2" },
    { base: "AO", letters: "\uA734" },
    { base: "AU", letters: "\uA736" },
    { base: "AV", letters: "\uA738\uA73A" },
    { base: "AY", letters: "\uA73C" },
    {
        base: "B",
        letters: "\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181",
    },
    {
        base: "C",
        letters: "\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E",
    },
    {
        base: "D",
        letters: "\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779\u00D0",
    },
    { base: "DZ", letters: "\u01F1\u01C4" },
    { base: "Dz", letters: "\u01F2\u01C5" },
    {
        base: "E",
        letters: "\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E",
    },
    { base: "F", letters: "\u0046\u24BB\uFF26\u1E1E\u0191\uA77B" },
    {
        base: "G",
        letters: "\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E",
    },
    {
        base: "H",
        letters: "\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D",
    },
    {
        base: "I",
        letters: "\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197",
    },
    { base: "J", letters: "\u004A\u24BF\uFF2A\u0134\u0248" },
    {
        base: "K",
        letters: "\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2",
    },
    {
        base: "L",
        letters: "\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780",
    },
    { base: "LJ", letters: "\u01C7" },
    { base: "Lj", letters: "\u01C8" },
    { base: "M", letters: "\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C" },
    {
        base: "N",
        letters: "\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4",
    },
    { base: "NJ", letters: "\u01CA" },
    { base: "Nj", letters: "\u01CB" },
    {
        base: "O",
        letters: "\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C",
    },
    { base: "OI", letters: "\u01A2" },
    { base: "OO", letters: "\uA74E" },
    { base: "OU", letters: "\u0222" },
    { base: "OE", letters: "\u008C\u0152" },
    { base: "oe", letters: "\u009C\u0153" },
    {
        base: "P",
        letters: "\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754",
    },
    { base: "Q", letters: "\u0051\u24C6\uFF31\uA756\uA758\u024A" },
    {
        base: "R",
        letters: "\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782",
    },
    {
        base: "S",
        letters: "\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784",
    },
    {
        base: "T",
        letters: "\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786",
    },
    { base: "TZ", letters: "\uA728" },
    {
        base: "U",
        letters: "\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244",
    },
    { base: "V", letters: "\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245" },
    { base: "VY", letters: "\uA760" },
    {
        base: "W",
        letters: "\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72",
    },
    { base: "X", letters: "\u0058\u24CD\uFF38\u1E8A\u1E8C" },
    {
        base: "Y",
        letters: "\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE",
    },
    {
        base: "Z",
        letters: "\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762",
    },
    {
        base: "a",
        letters: "\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250",
    },
    { base: "aa", letters: "\uA733" },
    { base: "ae", letters: "\u00E6\u01FD\u01E3" },
    { base: "ao", letters: "\uA735" },
    { base: "au", letters: "\uA737" },
    { base: "av", letters: "\uA739\uA73B" },
    { base: "ay", letters: "\uA73D" },
    {
        base: "b",
        letters: "\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253",
    },
    {
        base: "c",
        letters: "\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184",
    },
    {
        base: "d",
        letters: "\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A",
    },
    { base: "dz", letters: "\u01F3\u01C6" },
    {
        base: "e",
        letters: "\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD",
    },
    { base: "f", letters: "\u0066\u24D5\uFF46\u1E1F\u0192\uA77C" },
    {
        base: "g",
        letters: "\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F",
    },
    {
        base: "h",
        letters: "\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265",
    },
    { base: "hv", letters: "\u0195" },
    {
        base: "i",
        letters: "\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131",
    },
    { base: "j", letters: "\u006A\u24D9\uFF4A\u0135\u01F0\u0249" },
    {
        base: "k",
        letters: "\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3",
    },
    {
        base: "l",
        letters: "\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747",
    },
    { base: "lj", letters: "\u01C9" },
    { base: "m", letters: "\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F" },
    {
        base: "n",
        letters: "\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5",
    },
    { base: "nj", letters: "\u01CC" },
    {
        base: "o",
        letters: "\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275",
    },
    { base: "oi", letters: "\u01A3" },
    { base: "ou", letters: "\u0223" },
    { base: "oo", letters: "\uA74F" },
    {
        base: "p",
        letters: "\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755",
    },
    { base: "q", letters: "\u0071\u24E0\uFF51\u024B\uA757\uA759" },
    {
        base: "r",
        letters: "\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783",
    },
    {
        base: "s",
        letters: "\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B",
    },
    {
        base: "t",
        letters: "\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787",
    },
    { base: "tz", letters: "\uA729" },
    {
        base: "u",
        letters: "\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289",
    },
    { base: "v", letters: "\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C" },
    { base: "vy", letters: "\uA761" },
    {
        base: "w",
        letters: "\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73",
    },
    { base: "x", letters: "\u0078\u24E7\uFF58\u1E8B\u1E8D" },
    {
        base: "y",
        letters: "\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF",
    },
    {
        base: "z",
        letters: "\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763",
    },
];
const diacriticsMap = {};
for (let i = 0; i < defaultDiacriticsRemovalMap.length; i++) {
    const letters = defaultDiacriticsRemovalMap[i].letters;
    for (let j = 0; j < letters.length; j++) {
        diacriticsMap[letters[j]] = defaultDiacriticsRemovalMap[i].base;
    }
}

const regEmoji = new RegExp(/[\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83E[\uDD10-\uDDFF]|[\uFE0E-\uFE0F]/, "g");
function excludeSpace(text) {
    return text.replace(/ /g, "");
}
function excludeEmoji(text) {
    return text.replace(regEmoji, "");
}
function normalizeAccentsDiacritics(text) {
    // https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript
    return text.replace(/[^\u0000-\u007E]/g, (x) => { var _a; return (_a = diacriticsMap[x]) !== null && _a !== void 0 ? _a : x; });
}
function normalize(str, isNormalizeAccentsDiacritics) {
    const t = str.toLowerCase();
    return isNormalizeAccentsDiacritics ? normalizeAccentsDiacritics(t) : t;
}
function smartIncludes(text, query, isNormalizeAccentsDiacritics) {
    return excludeSpace(normalize(text, isNormalizeAccentsDiacritics)).includes(normalize(query, isNormalizeAccentsDiacritics));
}
function smartStartsWith(text, query, isNormalizeAccentsDiacritics) {
    return excludeSpace(excludeEmoji(normalize(text, isNormalizeAccentsDiacritics))).startsWith(normalize(query, isNormalizeAccentsDiacritics));
}
function smartEquals(text, query, isNormalizeAccentsDiacritics) {
    return (excludeSpace(excludeEmoji(normalize(text, isNormalizeAccentsDiacritics))) === normalize(query, isNormalizeAccentsDiacritics));
}
function excludeFormat(text) {
    return text
        .replace(/\[\[([^\]]+)]]/g, "$1")
        .replace(/\[([^\]]+)]\(https?[^)]+\)/g, "$1")
        .replace(/\[([^\]]+)]/g, "$1")
        .replace(/`([^`]+)`/g, "$1")
        .replace(/~~([^~]+)~~/g, "$1")
        .replace(/==([^=]+)==/g, "$1")
        .replace(/\*\*([^*]+)\*\*/g, "$1")
        .replace(/\*([^*]+)\*/g, "$1")
        .replace(/__([^_]+)__/g, "$1")
        .replace(/_([^_]+)_/g, "$1")
        .replace(/<[^>]+>([^<]+)<\/[^>]+>/g, "$1");
}

function matchQuery$1(item, query, searchByTags, searchByHeaders, searchByLinks, isNormalizeAccentsDiacritics) {
    // tag
    if (searchByTags && query.startsWith("#")) {
        const tags = item.tags.filter((tag) => smartIncludes(tag.slice(1), query.slice(1), isNormalizeAccentsDiacritics));
        return {
            type: tags.length > 0 ? "tag" : "not found",
            meta: tags,
        };
    }
    const qs = query.split("/");
    const file = qs.pop();
    const includeDir = qs.every((dir) => smartIncludes(item.file.parent.path, dir, isNormalizeAccentsDiacritics));
    if (!includeDir) {
        return { type: "not found" };
    }
    if (item.tokens.some((t) => smartEquals(t, file, isNormalizeAccentsDiacritics))) {
        return { type: "word-perfect", meta: [item.file.name] };
    }
    if (smartStartsWith(item.file.name, file, isNormalizeAccentsDiacritics)) {
        return { type: "prefix-name", meta: [item.file.name] };
    }
    const prefixNameMatchedAliases = item.aliases.filter((x) => smartStartsWith(x, file, isNormalizeAccentsDiacritics));
    if (prefixNameMatchedAliases.length > 0) {
        return {
            type: "prefix-name",
            meta: prefixNameMatchedAliases,
            alias: minBy(prefixNameMatchedAliases, (x) => x.length),
        };
    }
    if (smartIncludes(item.file.name, file, isNormalizeAccentsDiacritics)) {
        return { type: "name", meta: [item.file.name] };
    }
    const nameMatchedAliases = item.aliases.filter((x) => smartIncludes(x, file, isNormalizeAccentsDiacritics));
    if (nameMatchedAliases.length > 0) {
        return {
            type: "name",
            meta: nameMatchedAliases,
            alias: minBy(nameMatchedAliases, (x) => x.length),
        };
    }
    if (smartIncludes(item.file.path, file, isNormalizeAccentsDiacritics)) {
        return { type: "directory", meta: [item.file.path] };
    }
    if (searchByHeaders) {
        const headers = item.headers.filter((header) => smartIncludes(header, query, isNormalizeAccentsDiacritics));
        if (headers.length > 0) {
            return {
                type: "header",
                meta: headers,
            };
        }
    }
    if (searchByLinks) {
        const links = item.links.filter((link) => smartIncludes(link, query, isNormalizeAccentsDiacritics));
        if (links.length > 0) {
            return {
                type: "link",
                meta: links,
            };
        }
    }
    if (searchByTags) {
        const tags = item.tags.filter((tag) => smartIncludes(tag.slice(1), query, isNormalizeAccentsDiacritics));
        if (tags.length > 0) {
            return {
                type: "tag",
                meta: tags,
            };
        }
    }
    return { type: "not found" };
}
function matchQueryAll$1(item, queries, searchByTags, searchByHeaders, searchByLinks, isNormalizeAccentsDiacritics) {
    return queries.map((q) => matchQuery$1(item, q, searchByTags, searchByHeaders, searchByLinks, isNormalizeAccentsDiacritics));
}
function stampMatchResults(item, queries, searchByTags, searchByHeaders, searchByLinks, isNormalizeAccentsDiacritics) {
    return Object.assign(Object.assign({}, item), { matchResults: matchQueryAll$1(item, queries, searchByTags, searchByHeaders, searchByLinks, isNormalizeAccentsDiacritics) });
}

const FOLDER = `<svg viewBox="0 0 100 100" class="folder" width="17" height="17"><path fill="currentColor" stroke="currentColor" d="M6.1,8c-3.3,0-6,2.7-6,6v73.8c-0.1,0.5-0.1,0.9,0.1,1.4c0.6,2.7,3,4.8,5.9,4.8h78c3,0,5.4-2.2,5.9-5.1 c0-0.1,0.1-0.2,0.1-0.4c0,0,0-0.1,0-0.1l0.1-0.3c0,0,0,0,0-0.1l9.9-53.6l0.1-0.2V34c0-3.3-2.7-6-6-6v-6c0-3.3-2.7-6-6-6H36.1 c0,0,0,0-0.1,0c-0.1,0-0.2-0.2-0.6-0.6c-0.5-0.6-1.1-1.5-1.7-2.5c-0.6-1-1.3-2.1-2.1-3C30.9,9,29.7,8,28.1,8L6.1,8z M6.1,12h22 c-0.1,0,0.1,0,0.6,0.6c0.5,0.6,1.1,1.5,1.7,2.5c0.6,1,1.3,2.1,2.1,3c0.8,0.9,1.9,1.9,3.6,1.9h52c1.1,0,2,0.9,2,2v6h-74 c-3.1,0-5.7,2.5-5.9,5.6h-0.1L10.1,34l-6,32.4V14C4.1,12.9,4.9,12,6.1,12z M16.1,32h78c1.1,0,2,0.9,2,2l-9.8,53.1l-0.1,0.1 c0,0.1,0,0.2-0.1,0.2c0,0.1,0,0.2-0.1,0.2c0,0,0,0.1,0,0.1c0,0,0,0,0,0.1c0,0.1,0,0.2-0.1,0.3c0,0.1,0,0.1,0,0.2 c0,0.1,0,0.2,0,0.2c-0.3,0.8-1,1.4-1.9,1.4h-78c-1.1,0-2-0.9-2-2L14,34.4l0.1-0.2V34C14.1,32.9,14.9,32,16.1,32L16.1,32z"></path></svg>`;
const ALIAS = `<svg viewBox="0 0 100 100" class="forward-arrow" width="16" height="16"><path fill="currentColor" stroke="currentColor" d="m9.9,89.09226c-0.03094,0 -0.05414,0 -0.08508,0c-1.06734,-0.04641 -1.91039,-0.92812 -1.89492,-1.99547c0.00774,-0.48726 1.14469,-48.13101 47.52,-49.44586l0,-13.89094c0,-0.7657 0.44086,-1.4618 1.12922,-1.78664c0.68062,-0.33258 1.5082,-0.23203 2.09601,0.2475l31.68,25.74c0.46406,0.37899 0.73476,0.9436 0.73476,1.53914c0,0.59555 -0.2707,1.16016 -0.72703,1.53914l-31.68,25.74c-0.59555,0.47953 -1.41539,0.57234 -2.10375,0.2475c-0.68836,-0.32485 -1.12922,-1.02094 -1.12922,-1.78664l0,-13.84453c-41.26289,0.75024 -43.49039,24.81961 -43.56773,25.85601c-0.06961,1.04414 -0.93586,1.84078 -1.97226,1.84078z"></path></svg>`;
const TAG = `<svg viewBox="0 0 100 100" class="hashtag" width="17" height="17"><path fill="currentColor" stroke="currentColor" d="M36,18l-1.5,16H20l-0.4,4h14.5l-2.4,26H17.2l-0.4,4h14.5L30,82h4l1.3-14h26L60,82h4l1.3-14h15.5l0.4-4H65.7l2.4-26h15.5 l0.4-4H68.5L70,18h-4l-1.5,16h-26L40,18L36,18z M38.1,38h26l-2.4,26h-26L38.1,38z"></path></svg>`;
const LINK = `<svg viewBox="0 0 100 100" class="links-going-out" width="15" height="15"><path fill="currentColor" stroke="currentColor" d="M76.4,11.7c3.7,3.8,5.6,8.9,5,14.3c-0.5,4-2.4,7.6-5.2,10.5c-2.6,2.6-6.7,6.7-9.2,9.2c-2,2-4.4,3.6-7.1,4.5 c-4.5,1.4-9,1-12.8-0.9l2.9-2.9c1.4,0.5,3,0.8,4.5,0.8c3.6,0,7-1.4,9.5-3.9l9.6-9.6c3.3-3.3,4.7-8.1,3.5-13 c-0.3-1.2-0.8-2.4-1.5-3.5C73,13,68.7,10.6,64,10.6c-3.6,0-7,1.4-9.5,3.9L45,24c-2.5,2.5-3.9,5.9-3.9,9.5c0,1.6,0.3,3.1,0.8,4.5 l-3,3c-1.1-2.3-1.7-4.8-1.7-7.5c0-0.7,0-1.4,0.1-2.1c0.5-3.8,2.2-7.4,5-10.2l9.4-9.4C54.5,9,58.2,7,62.1,6.6 C67.5,6.1,72.6,7.9,76.4,11.7L76.4,11.7z M54.4,34.7c0.3,0.7,0.1,1.6-0.4,2.1L30.9,59.9c-0.5,0.5-1.2,0.7-1.9,0.5 s-1.2-0.7-1.4-1.4s0-1.4,0.5-1.9L51.2,34c0.3-0.4,0.8-0.6,1.3-0.6C53.4,33.5,54.1,34,54.4,34.7z M35.1,44.9l-2.9,2.9 c-1.4-0.5-3-0.8-4.5-0.8c-3.6,0-7,1.4-9.5,3.9l-9.6,9.6c-3.3,3.4-4.7,8.1-3.5,13c0.3,1.2,0.8,2.4,1.5,3.5 c2.6,4.2,6.9,6.6,11.6,6.6c3.6,0,7-1.4,9.5-3.9l9.6-9.6c2.5-2.5,3.9-5.9,3.9-9.5c0-1.6-0.3-3.1-0.8-4.5l2.9-2.9 c1.1,2.3,1.7,4.8,1.7,7.5c0,3-0.8,5.9-2.2,8.5c-0.8,1-1.5,1.9-2.1,2.9c-0.3,0.3-0.5,0.6-0.8,0.8l-9.4,9.4 c-2.9,2.9-6.6,4.8-10.6,5.2c-6.2,0.6-12-1.9-15.8-6.9c-2.4-3.2-3.6-7.2-3.4-11.2c0-0.1,0-0.2,0-0.3c0.3-4.2,2-8.1,5-11.1l9.4-9.4 c2-2,4.4-3.6,7.1-4.5C26.8,42.6,31.3,43,35.1,44.9L35.1,44.9z"></path><path fill="currentColor" stroke="currentColor" d="M99.2,69.3c0-0.2,0-0.2,0-0.4c0-0.2,0-0.2,0-0.4s0-0.2-0.2-0.4c0-0.2,0-0.2-0.2-0.4l0,0l-0.2-0.2l-0.2-0.2L79.2,53 c-0.6-0.4-1.3-0.6-1.9-0.2c-0.8,0.4-1.2,1-1.2,1.7V62c-8.1,0.4-14.6,3.1-19.2,8.1c-8.5,9-7.7,22.5-7.7,23.1c0,0.2,0,0.2,0,0.4 c0,0.2,0,0.2,0,0.4s0.2,0.2,0.2,0.4l0.2,0.2c0.2,0.2,0.2,0.2,0.4,0.2l0.2,0.2c0.2,0,0.4,0,0.6,0.2H51l0,0l0,0c0,0,0,0,0.2,0 s0.2,0,0.4,0s0.2,0,0.4-0.2c0.2,0,0.2-0.2,0.4-0.2s0.2-0.2,0.4-0.2c0,0,0.2-0.2,0.2-0.4c0-0.2,0.2-0.2,0.2-0.4s0-0.2,0-0.4 c0-0.2,0-0.2,0-0.4c0-0.8,0.6-16.6,23.1-17.5v7.3c0,0.8,0.4,1.3,1,1.7c0.6,0.4,1.3,0.2,1.9-0.2l19.2-14l0.2-0.2l0.2-0.2l0,0 c0-0.2,0.2-0.2,0.2-0.4L99.2,69.3L99.2,69.3z"></path></svg>`;
const HEADER = `<svg viewBox="0 0 100 100" class="bullet-list" width="15" height="15"><path fill="currentColor" stroke="currentColor" d="M16.4,16.4c-3.5,0-6.4,2.9-6.4,6.4s2.9,6.4,6.4,6.4s6.4-2.9,6.4-6.4S19.9,16.4,16.4,16.4z M16.4,19.6 c1.8,0,3.2,1.4,3.2,3.2c0,1.8-1.4,3.2-3.2,3.2s-3.2-1.4-3.2-3.2C13.2,21,14.6,19.6,16.4,19.6z M29.2,21.2v3.2H90v-3.2H29.2z M16.4,43.6c-3.5,0-6.4,2.9-6.4,6.4s2.9,6.4,6.4,6.4s6.4-2.9,6.4-6.4S19.9,43.6,16.4,43.6z M16.4,46.8c1.8,0,3.2,1.4,3.2,3.2 s-1.4,3.2-3.2,3.2s-3.2-1.4-3.2-3.2S14.6,46.8,16.4,46.8z M29.2,48.4v3.2H90v-3.2H29.2z M16.4,70.8c-3.5,0-6.4,2.9-6.4,6.4 c0,3.5,2.9,6.4,6.4,6.4s6.4-2.9,6.4-6.4C22.8,73.7,19.9,70.8,16.4,70.8z M16.4,74c1.8,0,3.2,1.4,3.2,3.2c0,1.8-1.4,3.2-3.2,3.2 s-3.2-1.4-3.2-3.2C13.2,75.4,14.6,74,16.4,74z M29.2,75.6v3.2H90v-3.2H29.2z"></path></svg>`;

function createItemDiv(item, aliases, options) {
    const itemDiv = createDiv({
        cls: [
            "another-quick-switcher__item",
            item.phantom ? "another-quick-switcher__phantom_item" : "",
            item.starred ? "another-quick-switcher__starred_item" : "",
            options.hideGutterIcons ? "another-quick-switcher__gutter_hidden" : "",
        ],
    });
    const entryDiv = createDiv({
        cls: "another-quick-switcher__item__entry",
    });
    const titleDiv = createDiv({
        cls: "another-quick-switcher__item__title",
        text: options.showAliasesOnTop && aliases.length > 0
            ? aliases.join(" / ")
            : item.file.basename,
    });
    entryDiv.appendChild(titleDiv);
    if (item.order < 9) {
        const hotKeyGuide = createSpan({
            cls: "another-quick-switcher__item__hot-key-guide",
            text: `${item.order + 1}`,
        });
        entryDiv.appendChild(hotKeyGuide);
    }
    if (options.showDirectory) {
        const directoryDiv = createDiv({
            cls: "another-quick-switcher__item__directory",
        });
        directoryDiv.insertAdjacentHTML("beforeend", FOLDER);
        const text = options.showFullPathOfDirectory
            ? item.file.parent.path
            : item.file.parent.name;
        directoryDiv.appendText(` ${text}`);
        entryDiv.appendChild(directoryDiv);
        if (options.showDirectoryAtNewLine) {
            itemDiv.appendChild(entryDiv);
            itemDiv.appendChild(directoryDiv);
            return itemDiv;
        }
    }
    itemDiv.appendChild(entryDiv);
    return itemDiv;
}
function createDescriptionDiv(item, aliases, tags, links, countByHeader, headerResultsNum, options) {
    const descriptionDiv = createDiv({
        cls: "another-quick-switcher__item__descriptions",
    });
    if (aliases.length > 0) {
        const aliasDiv = createDiv({
            cls: "another-quick-switcher__item__description",
        });
        const displayAliases = options.showAliasesOnTop
            ? [item.file.basename]
            : aliases;
        displayAliases.forEach((x) => {
            const aliasSpan = createSpan({
                cls: "another-quick-switcher__item__description__alias",
            });
            aliasSpan.insertAdjacentHTML("beforeend", ALIAS);
            aliasSpan.appendText(x);
            aliasDiv.appendChild(aliasSpan);
        });
        descriptionDiv.appendChild(aliasDiv);
    }
    if (tags.length > 0) {
        const tagsDiv = createDiv({
            cls: "another-quick-switcher__item__description",
        });
        tags.forEach((x) => {
            const tagsSpan = createSpan({
                cls: "another-quick-switcher__item__description__tag",
            });
            tagsSpan.insertAdjacentHTML("beforeend", TAG);
            tagsSpan.appendText(x.replace("#", ""));
            tagsDiv.appendChild(tagsSpan);
        });
        descriptionDiv.appendChild(tagsDiv);
    }
    if (links.length > 0) {
        const linksDiv = createDiv({
            cls: "another-quick-switcher__item__description",
        });
        links.forEach((x) => {
            const linksSpan = createSpan({
                cls: "another-quick-switcher__item__description__link",
            });
            linksSpan.insertAdjacentHTML("beforeend", LINK);
            linksSpan.appendChild(createSpan({ text: x, attr: { style: "padding-left: 3px" } }));
            linksDiv.appendChild(linksSpan);
        });
        descriptionDiv.appendChild(linksDiv);
    }
    if (Object.keys(countByHeader).length > 0) {
        const headersDiv = createDiv({
            cls: "another-quick-switcher__item__description",
        });
        Object.entries(countByHeader)
            .map(([header, n]) => ({ header, n }))
            .sort((a, b) => b.n - a.n)
            .forEach(({ header, n }) => {
            const headersSpan = createSpan({
                cls: [
                    "another-quick-switcher__item__description__header",
                    n !== headerResultsNum
                        ? "another-quick-switcher__item__description__header__dimmed"
                        : "",
                ],
            });
            headersSpan.insertAdjacentHTML("beforeend", HEADER);
            headersSpan.appendChild(createSpan({ text: header, attr: { style: "padding-left: 3px" } }));
            headersDiv.appendChild(headersSpan);
        });
        descriptionDiv.appendChild(headersDiv);
    }
    return descriptionDiv;
}
function createElements(item, options) {
    const aliases = uniqFlatMap(item.matchResults.filter((res) => res.alias), (x) => { var _a; return (_a = x.meta) !== null && _a !== void 0 ? _a : []; });
    const tags = uniqFlatMap(item.matchResults.filter((res) => res.type === "tag"), (x) => { var _a; return (_a = x.meta) !== null && _a !== void 0 ? _a : []; });
    const links = uniqFlatMap(item.matchResults.filter((res) => res.type === "link"), (x) => { var _a; return (_a = x.meta) !== null && _a !== void 0 ? _a : []; });
    const headerResults = item.matchResults.filter((res) => res.type === "header");
    const headerResultsNum = headerResults.length;
    const countByHeader = count(headerResults.flatMap((xs) => { var _a; return uniq((_a = xs.meta) !== null && _a !== void 0 ? _a : []); }));
    const itemDiv = createItemDiv(item, aliases, options);
    if (aliases.length === 0 &&
        tags.length === 0 &&
        links.length === 0 &&
        countByHeader === {}) {
        return { itemDiv };
    }
    const descriptionDiv = createDescriptionDiv(item, aliases, tags, links, countByHeader, headerResultsNum, options);
    return {
        itemDiv,
        descriptionDiv,
    };
}

function normalSort(items, lastOpenFileIndexByPath) {
    return items.sort((a, b) => {
        let result;
        result = priorityToPerfectWord(a, b);
        if (result !== 0) {
            return result;
        }
        result = priorityToPrefixName(a, b);
        if (result !== 0) {
            return result;
        }
        result = priorityToName(a, b);
        if (result !== 0) {
            return result;
        }
        result = priorityToLength(a, b);
        if (result !== 0) {
            return result;
        }
        result = priorityToLastOpened(a, b, lastOpenFileIndexByPath);
        if (result !== 0) {
            return result;
        }
        result = priorityToLastModified(a, b);
        if (result !== 0) {
            return result;
        }
        return 0;
    });
}
function recentSort(items, lastOpenFileIndexByPath) {
    return items.sort((a, b) => {
        let result;
        result = priorityToLastOpened(a, b, lastOpenFileIndexByPath);
        if (result !== 0) {
            return result;
        }
        result = priorityToLastModified(a, b);
        if (result !== 0) {
            return result;
        }
        return 0;
    });
}
function fileNameRecentSort(items, lastOpenFileIndexByPath) {
    return items.sort((a, b) => {
        let result;
        result = priorityToPerfectWord(a, b);
        if (result !== 0) {
            return result;
        }
        result = priorityToName(a, b);
        if (result !== 0) {
            return result;
        }
        result = priorityToLastOpened(a, b, lastOpenFileIndexByPath);
        if (result !== 0) {
            return result;
        }
        result = priorityToLastModified(a, b);
        if (result !== 0) {
            return result;
        }
        return 0;
    });
}
function recommendedRecentSort(items, lastOpenFileIndexByPath) {
    return items.sort((a, b) => {
        let result;
        result = priorityToName(a, b);
        if (result !== 0) {
            return result;
        }
        result = priorityToTag(a, b);
        if (result !== 0) {
            return result;
        }
        result = priorityToHeader(a, b);
        if (result !== 0) {
            return result;
        }
        result = priorityToLink(a, b);
        if (result !== 0) {
            return result;
        }
        result = priorityToLastOpened(a, b, lastOpenFileIndexByPath);
        if (result !== 0) {
            return result;
        }
        result = priorityToLastModified(a, b);
        if (result !== 0) {
            return result;
        }
        return 0;
    });
}
function starRecentSort(items, lastOpenFileIndexByPath) {
    return items.sort((a, b) => {
        let result;
        result = priorityToStar(a, b);
        if (result !== 0) {
            return result;
        }
        result = priorityToLastOpened(a, b, lastOpenFileIndexByPath);
        if (result !== 0) {
            return result;
        }
        result = priorityToLastModified(a, b);
        if (result !== 0) {
            return result;
        }
        result = priorityToPerfectWord(a, b);
        if (result !== 0) {
            return result;
        }
        result = priorityToName(a, b);
        if (result !== 0) {
            return result;
        }
        return 0;
    });
}
function compare(a, b, toOrdered, order = "asc") {
    const oA = toOrdered(a);
    const oB = toOrdered(b);
    if (oA === oB) {
        return 0;
    }
    switch (order) {
        case "asc":
            if (oA > oB) {
                return 1;
            }
            if (oB > oA) {
                return -1;
            }
            return 0;
        case "desc":
            if (oA < oB) {
                return 1;
            }
            if (oB < oA) {
                return -1;
            }
            return 0;
    }
}
function priorityToPerfectWord(a, b) {
    return compare(a, b, (x) => x.matchResults.filter((x) => x.type === "word-perfect").length, "desc");
}
function priorityToPrefixName(a, b) {
    return compare(a, b, (x) => x.matchResults.filter((x) => ["prefix-name", "word-perfect"].includes(x.type)).length, "desc");
}
function priorityToName(a, b) {
    return compare(a, b, (x) => x.matchResults.filter((x) => ["name", "prefix-name", "word-perfect"].includes(x.type)).length, "desc");
}
function priorityToTag(a, b) {
    return compare(a, b, (x) => x.matchResults.filter((x) => x.type === "tag").length, "desc");
}
function priorityToHeader(a, b) {
    return compare(a, b, (x) => x.matchResults.filter((x) => x.type === "header").length, "desc");
}
function priorityToLink(a, b) {
    return compare(a, b, (x) => x.matchResults.filter((x) => x.type === "link").length, "desc");
}
function priorityToLength(a, b) {
    return compare(a, b, (x) => x.matchResults[0].alias
        ? x.matchResults[0].alias.length
        : x.file.name.length, "asc");
}
function priorityToLastOpened(a, b, lastOpenFileIndexByPath) {
    return compare(a, b, (x) => { var _a; return (_a = lastOpenFileIndexByPath[x.file.path]) !== null && _a !== void 0 ? _a : 999999; }, "asc");
}
function priorityToLastModified(a, b) {
    return compare(a, b, (x) => x.file.stat.mtime, "desc");
}
function priorityToStar(a, b) {
    return compare(a, b, (x) => Number(x.starred), "desc");
}

const MOD = obsidian.Platform.isMacOS ? "cmd" : "ctrl";
const quickResultSelectionModifier = (userAltInsteadOfModForQuickResultSelection) => (userAltInsteadOfModForQuickResultSelection ? "alt" : MOD);

function buildLogMessage(message, msec) {
    return `${message}: ${Math.round(msec)}[ms]`;
}
class AnotherQuickSwitcherModal extends obsidian.SuggestModal {
    constructor(app, initialMode, settings) {
        var _a;
        super(app);
        this.initialMode = initialMode;
        this.appHelper = new AppHelper(app);
        this.settings = settings;
        this.limit = this.settings.maxNumberOfSuggestions;
        this.setHotKeys();
        const phantomItems = this.settings.showExistingFilesOnly
            ? []
            : this.appHelper.searchPhantomFiles().map((x) => ({
                file: x,
                aliases: [],
                tags: [],
                headers: [],
                links: [],
                phantom: true,
                starred: false,
                matchResults: [],
                tokens: x.basename.split(" "),
            }));
        const starredPathMap = keyBy(this.appHelper.getStarredFilePaths(), (x) => x);
        const activeFilePath = (_a = app.workspace.getActiveFile()) === null || _a === void 0 ? void 0 : _a.path;
        const start = performance.now();
        const markdownItems = app.vault
            .getMarkdownFiles()
            .filter((x) => x.path !== activeFilePath && app.metadataCache.getFileCache(x))
            .map((x) => {
            var _a, _b, _c, _d, _e, _f;
            const cache = app.metadataCache.getFileCache(x); // already filtered
            return {
                file: x,
                aliases: (_a = obsidian.parseFrontMatterAliases(cache.frontmatter)) !== null && _a !== void 0 ? _a : [],
                tags: uniq([
                    ...((_b = cache.tags) !== null && _b !== void 0 ? _b : []).map((x) => x.tag),
                    ...((_c = obsidian.parseFrontMatterTags(cache.frontmatter)) !== null && _c !== void 0 ? _c : []),
                ]),
                headers: this.settings.searchFromHeaders
                    ? ((_d = cache.headings) !== null && _d !== void 0 ? _d : []).map((x) => excludeFormat(x.heading))
                    : [],
                links: this.settings.searchByLinks
                    ? uniq((_f = (_e = cache.links) === null || _e === void 0 ? void 0 : _e.map((x) => { var _a; return (_a = x.displayText) !== null && _a !== void 0 ? _a : ""; })) !== null && _f !== void 0 ? _f : [])
                    : [],
                phantom: false,
                starred: x.path in starredPathMap,
                matchResults: [],
                tokens: x.basename.split(" "),
            };
        });
        this.showDebugLog(() => buildLogMessage(`Indexing markdown items: `, performance.now() - start));
        this.originItems = [...markdownItems, ...phantomItems];
        this.ignoredItems = this.ignoreItems(initialMode);
        this.debounceGetSuggestions = obsidian.debounce((query, cb) => {
            cb(this._getSuggestions(query));
        }, this.settings.searchDelayMilliSeconds, true);
    }
    handleCreateNew(searchQuery, leafType) {
        return __awaiter(this, void 0, void 0, function* () {
            const file = yield this.appHelper.createMarkdown(this.searchQuery);
            if (!file) {
                // noinspection ObjectAllocationIgnored
                new obsidian.Notice("This file already exists.");
                return;
            }
            this.appHelper.openMarkdownFile(file, { leaf: leafType });
            this.close();
        });
    }
    ignoreItems(mode) {
        const _ignoreItems = (patterns) => ignoreItems(this.originItems, patterns, (x) => x.file.path);
        switch (mode) {
            case "normal":
                return _ignoreItems(this.settings.ignoreNormalPathPrefixPatterns);
            case "recent":
                return _ignoreItems(this.settings.ignoreRecentPathPrefixPatterns);
            case "filename-recent":
                return _ignoreItems(this.settings.ignoreFilenameRecentPathPrefixPatterns);
            case "recommended-recent":
                return _ignoreItems(this.settings.ignoreFilenameRecentPathPrefixPatterns);
            case "star-recent":
                // do nothing
                return this.originItems;
            case "backlink":
                return _ignoreItems(this.settings.ignoreBackLinkPathPrefixPatterns);
        }
    }
    getSuggestions(query) {
        if (!query) {
            return this._getSuggestions(query);
        }
        return new Promise((resolve) => {
            this.debounceGetSuggestions(query, (items) => {
                resolve(items);
            });
        });
    }
    _getSuggestions(query) {
        var _a;
        const start = performance.now();
        let lastOpenFileIndexByPath = {};
        this.app.workspace.getLastOpenFiles().forEach((v, i) => {
            lastOpenFileIndexByPath[v] = i;
        });
        let searchQuery = query;
        const changeMode = (mode, slice = 0) => {
            if (this.mode !== mode) {
                this.ignoredItems = this.ignoreItems(mode);
            }
            this.mode = mode;
            searchQuery = query.slice(slice);
        };
        // noinspection IfStatementWithTooManyBranchesJS
        if (query.startsWith(":n ")) {
            changeMode("normal", 3);
        }
        else if (query.startsWith(":r ")) {
            changeMode("recent", 3);
        }
        else if (query.startsWith(":f ")) {
            changeMode("filename-recent", 3);
        }
        else if (query.startsWith(":s ")) {
            changeMode("star-recent", 3);
        }
        else if (query.startsWith(":b ")) {
            changeMode("backlink", 3);
        }
        else {
            changeMode(this.initialMode);
        }
        this.searchQuery = searchQuery;
        const qs = searchQuery.split(" ").filter((x) => x);
        if (this.mode === "backlink") {
            const activeFilePath = (_a = this.app.workspace.getActiveFile()) === null || _a === void 0 ? void 0 : _a.path;
            if (!activeFilePath) {
                return [];
            }
            // ✨ If I can use MetadataCache.getBacklinksForFile, I would like to use it instead of original createBacklinksMap :)
            const backlinksMap = this.appHelper.createBacklinksMap();
            const items = this.ignoredItems
                .filter((x) => { var _a; return (_a = backlinksMap[activeFilePath]) === null || _a === void 0 ? void 0 : _a.has(x.file.path); })
                .map((x) => stampMatchResults(x, qs, false, false, false, this.settings.normalizeAccentsAndDiacritics))
                .filter((x) => x.matchResults.every((x) => x.type !== "not found"))
                .slice(0, this.settings.maxNumberOfSuggestions);
            this.showDebugLog(() => buildLogMessage(`Get suggestions: ${query}`, performance.now() - start));
            return items.map((x, order) => (Object.assign(Object.assign({}, x), { order })));
        }
        if (!query.trim()) {
            let results;
            switch (this.mode) {
                case "star-recent":
                    results = starRecentSort(this.ignoredItems, lastOpenFileIndexByPath)
                        .slice(0, this.settings.maxNumberOfSuggestions)
                        .map((x, order) => (Object.assign(Object.assign({}, x), { order })));
                    break;
                default:
                    results = recentSort(this.ignoredItems, lastOpenFileIndexByPath)
                        .slice(0, this.settings.maxNumberOfSuggestions)
                        .map((x, order) => (Object.assign(Object.assign({}, x), { order })));
                    break;
            }
            this.showDebugLog(() => buildLogMessage(`Get suggestions: ${query}`, performance.now() - start));
            return results;
        }
        const matchedSuggestions = this.ignoredItems
            .map((x) => stampMatchResults(x, qs, true, this.settings.searchFromHeaders, this.settings.searchByLinks, this.settings.normalizeAccentsAndDiacritics))
            .filter((x) => x.matchResults.every((x) => x.type !== "not found"));
        let items = [];
        switch (this.mode) {
            case "normal":
                items = normalSort(matchedSuggestions, lastOpenFileIndexByPath);
                break;
            case "recent":
                items = recentSort(matchedSuggestions, lastOpenFileIndexByPath);
                break;
            case "filename-recent":
                items = fileNameRecentSort(matchedSuggestions, lastOpenFileIndexByPath);
                break;
            case "recommended-recent":
                items = recommendedRecentSort(matchedSuggestions, lastOpenFileIndexByPath);
                break;
            case "star-recent":
                items = starRecentSort(matchedSuggestions, lastOpenFileIndexByPath);
                break;
        }
        this.showDebugLog(() => buildLogMessage(`Get suggestions: ${query}`, performance.now() - start));
        return items
            .slice(0, this.settings.maxNumberOfSuggestions)
            .map((x, order) => (Object.assign(Object.assign({}, x), { order })));
    }
    renderSuggestion(item, el) {
        const { itemDiv, descriptionDiv } = createElements(item, {
            showDirectory: this.settings.showDirectory,
            showDirectoryAtNewLine: this.settings.showDirectoryAtNewLine,
            showFullPathOfDirectory: this.settings.showFullPathOfDirectory,
            showAliasesOnTop: this.settings.showAliasesOnTop,
            hideGutterIcons: this.settings.hideGutterIcons,
        });
        if (descriptionDiv) {
            itemDiv.appendChild(descriptionDiv);
        }
        el.appendChild(itemDiv);
    }
    onNoSuggestion() {
        super.onNoSuggestion();
        const createButton = createEl("button", {
            text: "Create",
            cls: "another-quick-switcher__create_button",
        });
        createButton.addEventListener("click", () => {
            this.handleCreateNew(this.searchQuery, "same");
        });
        this.resultContainerEl.appendChild(createButton);
    }
    onChooseSuggestion(item, evt) {
        return __awaiter(this, void 0, void 0, function* () {
            let fileToOpened = item.file;
            if (evt.altKey && !evt.metaKey) {
                this.appHelper.insertLinkToActiveFileBy(fileToOpened);
                return;
            }
            if (item.phantom) {
                fileToOpened = yield this.app.vault.create(item.file.path, "");
            }
            const offset = this.mode === "backlink"
                ? this.appHelper.findFirstLinkOffset(item.file, this.app.workspace.getActiveFile() // never undefined
                )
                : 0;
            let leaf;
            const key = evt.key;
            if (evt.metaKey && key === "]") {
                const urls = yield this.appHelper.findExternalLinkUrls(fileToOpened);
                if (urls.length > 0) {
                    activeWindow.open(urls[0]);
                }
                else {
                    this.appHelper.openMarkdownFile(fileToOpened, { leaf: "same", offset });
                }
                return;
            }
            if (evt.metaKey && key === "o") {
                leaf = "popout";
            }
            else if (evt.metaKey && evt.shiftKey && key === "-") {
                leaf = "new-vertical";
            }
            else if (evt.metaKey && !evt.shiftKey && key === "-") {
                leaf = "new-horizontal";
            }
            else if (evt.metaKey && evt.altKey) {
                leaf = "popup";
            }
            else if (evt.metaKey && !evt.altKey) {
                leaf = "new";
            }
            else {
                leaf = "same";
            }
            this.appHelper.openMarkdownFile(fileToOpened, { leaf, offset });
        });
    }
    showDebugLog(toMessage) {
        if (this.settings.showLogAboutPerformanceInConsole) {
            console.log(toMessage());
        }
    }
    setHotKeys() {
        const openNthMod = quickResultSelectionModifier(this.settings.userAltInsteadOfModForQuickResultSelection);
        this.setInstructions([
            {
                command: `[↑↓][${MOD} n or p][${MOD} j or k]`,
                purpose: "navigate",
            },
            { command: `[${openNthMod} 1~9]`, purpose: "open Nth" },
            { command: `[${MOD} d]`, purpose: "clear input" },
            { command: "[tab]", purpose: "replace input" },
            { command: "[↵]", purpose: "open" },
            { command: `[${MOD} ↵]`, purpose: "open in new pane" },
            { command: `[${MOD} -]`, purpose: "open in new pane (horizontal)" },
            { command: `[${MOD} shift -]`, purpose: "open in new pane (vertical)" },
            { command: `[${MOD} o]`, purpose: "open in new window" },
            { command: `[${MOD} alt ↵]`, purpose: "open in popup" },
            { command: "[shift ↵]", purpose: "create" },
            { command: `[${MOD} shift ↵]`, purpose: "create in new pane" },
            { command: `[${MOD} shift o]`, purpose: "create in new window" },
            { command: `[${MOD} shift alt ↵]`, purpose: "create in popup" },
            { command: `[${MOD} ]]`, purpose: "open first URL" },
            { command: "[alt ↵]", purpose: "insert to editor" },
            { command: "[esc]", purpose: "dismiss" },
        ]);
        this.scope.register(["Mod"], "Enter", () => this.chooser.useSelectedItem({ metaKey: true }));
        this.scope.register(["Alt"], "Enter", () => this.chooser.useSelectedItem({ altKey: true }));
        this.scope.register(["Mod"], "-", () => {
            this.chooser.useSelectedItem({ metaKey: true, key: "-" });
            return false;
        });
        this.scope.register(["Mod", "Shift"], "-", () => {
            this.chooser.useSelectedItem({ metaKey: true, shiftKey: true, key: "-" });
            return false;
        });
        this.scope.register(["Mod"], "o", () => this.chooser.useSelectedItem({ metaKey: true, key: "o" }));
        this.scope.register(["Mod", "Alt"], "Enter", () => this.chooser.useSelectedItem({ metaKey: true, altKey: true }));
        const modifierKey = this.settings.userAltInsteadOfModForQuickResultSelection
            ? "Alt"
            : "Mod";
        [1, 2, 3, 4, 5, 6, 7, 8, 9].forEach((n) => {
            this.scope.register([modifierKey], String(n), () => {
                this.chooser.setSelectedItem(n - 1, true);
                this.chooser.useSelectedItem({});
            });
        });
        this.scope.register(["Shift"], "Enter", () => {
            if (this.searchQuery) {
                this.handleCreateNew(this.searchQuery, "same");
            }
        });
        this.scope.register(["Shift", "Mod"], "Enter", () => {
            if (this.searchQuery) {
                this.handleCreateNew(this.searchQuery, "new");
            }
        });
        this.scope.register(["Shift", "Mod"], "o", () => {
            if (this.searchQuery) {
                this.handleCreateNew(this.searchQuery, "popout");
            }
        });
        this.scope.register(["Shift", "Mod", "Alt"], "Enter", () => {
            if (this.searchQuery) {
                this.handleCreateNew(this.searchQuery, "popup");
            }
        });
        this.scope.register(["Mod"], "N", () => {
            document.dispatchEvent(new KeyboardEvent("keydown", { key: "ArrowDown" }));
        });
        this.scope.register(["Mod"], "P", () => {
            document.dispatchEvent(new KeyboardEvent("keydown", { key: "ArrowUp" }));
        });
        this.scope.register(["Mod"], "J", () => {
            document.dispatchEvent(new KeyboardEvent("keydown", { key: "ArrowDown" }));
        });
        this.scope.register(["Mod"], "K", () => {
            document.dispatchEvent(new KeyboardEvent("keydown", { key: "ArrowUp" }));
        });
        this.scope.register([], "Tab", (evt) => {
            evt.preventDefault();
            if (this.chooser.values) {
                this.inputEl.value =
                    this.chooser.values[this.chooser.selectedItem].file.basename;
                // Necessary to rerender suggestions
                this.inputEl.dispatchEvent(new Event("input"));
            }
        });
        this.scope.register(["Mod"], "D", () => {
            this.inputEl.value = "";
            // Necessary to rerender suggestions
            this.inputEl.dispatchEvent(new Event("input"));
        });
        this.scope.register(["Mod"], "]", () => {
            this.chooser.useSelectedItem({ metaKey: true, key: "]" });
        });
    }
}

function matchQuery(item, query, matcher, isNormalizeAccentsDiacritics) {
    const qs = query.split("/");
    const folder = qs.pop();
    return (qs.every((dir) => smartIncludes(item.folder.parent.path, dir, isNormalizeAccentsDiacritics)) && matcher(item, folder));
}
function matchQueryAll(item, queries, matcher, isNormalizeAccentsDiacritics) {
    return queries.every((q) => matchQuery(item, q, matcher, isNormalizeAccentsDiacritics));
}
function stampMatchType(item, queries, isNormalizeAccentsDiacritics) {
    if (matchQueryAll(item, queries, (item, query) => smartStartsWith(item.folder.name, query, isNormalizeAccentsDiacritics), isNormalizeAccentsDiacritics)) {
        return Object.assign(Object.assign({}, item), { matchType: "prefix-name" });
    }
    if (matchQueryAll(item, queries, (item, query) => smartIncludes(item.folder.name, query, isNormalizeAccentsDiacritics), isNormalizeAccentsDiacritics)) {
        return Object.assign(Object.assign({}, item), { matchType: "name" });
    }
    if (matchQueryAll(item, queries, (item, query) => smartIncludes(item.folder.path, query, isNormalizeAccentsDiacritics), isNormalizeAccentsDiacritics)) {
        return Object.assign(Object.assign({}, item), { matchType: "directory" });
    }
    return item;
}
class MoveModal extends obsidian.SuggestModal {
    constructor(app, settings) {
        super(app);
        this.appHelper = new AppHelper(app);
        this.settings = settings;
        this.setInstructions([
            { command: "[↑↓]", purpose: "navigate" },
            { command: "[↵]", purpose: "move to" },
            { command: "[esc]", purpose: "dismiss" },
        ]);
        this.originItems = this.appHelper
            .getFolders()
            .filter((x) => !x.isRoot())
            .map((x) => ({
            folder: x,
        }));
        this.ignoredItems = ignoreItems(this.originItems, this.settings.ignoreMoveFileToAnotherFolderPrefixPatterns, (x) => x.folder.path);
    }
    getSuggestions(query) {
        const qs = query.split(" ").filter((x) => x);
        return this.ignoredItems
            .map((x) => stampMatchType(x, qs, this.settings.normalizeAccentsAndDiacritics))
            .filter((x) => x.matchType)
            .sort(sorter((x) => (x.matchType === "directory" ? 1 : 0)))
            .sort(sorter((x) => x.matchType === "prefix-name" ? 1000 - x.folder.name.length : 0, "desc"))
            .slice(0, 10);
    }
    renderSuggestion(item, el) {
        const itemDiv = createDiv({
            cls: "another-quick-switcher__item",
        });
        const entryDiv = createDiv({
            cls: "another-quick-switcher__item__entry",
        });
        const folderDiv = createDiv({
            cls: "another-quick-switcher__item__title",
            text: item.folder.name,
        });
        entryDiv.appendChild(folderDiv);
        const directoryDiv = createDiv({
            cls: "another-quick-switcher__item__directory",
        });
        directoryDiv.insertAdjacentHTML("beforeend", FOLDER);
        directoryDiv.appendText(` ${item.folder.parent.name}`);
        entryDiv.appendChild(directoryDiv);
        const prefixIcon = createSpan({
            cls: "another-quick-switcher__item__icon",
        });
        prefixIcon.insertAdjacentHTML("beforeend", FOLDER);
        itemDiv.appendChild(prefixIcon);
        itemDiv.appendChild(entryDiv);
        el.appendChild(itemDiv);
    }
    onChooseSuggestion(item) {
        return __awaiter(this, void 0, void 0, function* () {
            const activeFile = this.app.workspace.getActiveFile();
            if (!activeFile) {
                return;
            }
            yield this.app.fileManager.renameFile(activeFile, `${item.folder.path}/${activeFile.name}`);
        });
    }
}

class HeaderModal extends obsidian.SuggestModal {
    constructor(app, settings, floating) {
        super(app);
        this.hitItems = [];
        /** ⚠Not work correctly in all cases */
        this.unsafeSelectedIndex = 0;
        this.limit = 1000;
        this.appHelper = new AppHelper(app);
        this.settings = settings;
        this.floating = floating;
        this.items = this.appHelper.getHeadersInActiveFile().map((x, i) => ({
            value: excludeFormat(x.heading),
            level: x.level,
            position: x.position,
            hit: false,
            index: i,
        }));
        this.inputEl.addEventListener("input", () => {
            var _a, _b;
            if (this.hitItems.length === 0) {
                this.select(this.unsafeSelectedIndex, this.floating);
                return;
            }
            const nextIndex = (_b = (_a = this.hitItems.find((x) => x.index >= this.unsafeSelectedIndex)) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : this.hitItems[0].index;
            this.select(nextIndex, this.floating);
        });
        this.bindHotKeys();
    }
    select(index, preview = true) {
        this.chooser.setSelectedItem(index, true);
        this.unsafeSelectedIndex = index;
        if (preview) {
            this.appHelper.moveTo(this.items[this.unsafeSelectedIndex].position);
        }
    }
    getNextSelectIndex() {
        return this.unsafeSelectedIndex + 1 > this.items.length - 1
            ? 0
            : this.unsafeSelectedIndex + 1;
    }
    getPreviousSelectIndex() {
        return this.unsafeSelectedIndex - 1 < 0
            ? this.items.length - 1
            : this.unsafeSelectedIndex - 1;
    }
    onOpen() {
        var _a;
        super.onOpen();
        if (this.floating) {
            (_a = activeWindow.activeDocument
                .querySelector(".modal-bg")) === null || _a === void 0 ? void 0 : _a.addClass("another-quick-switcher__header__floating-modal-bg");
            const promptEl = activeWindow.activeDocument.querySelector(".prompt");
            promptEl === null || promptEl === void 0 ? void 0 : promptEl.addClass("another-quick-switcher__header__floating-prompt");
            const markdownView = this.appHelper.getMarkdownViewInActiveLeaf();
            if (markdownView) {
                const windowWidth = this.app.workspace.containerEl.offsetWidth;
                const modalWidth = this.modalEl.offsetWidth;
                const viewPadLeft = markdownView.containerEl.parentElement.offsetLeft +
                    (this.appHelper.isPopWindow()
                        ? 0
                        : this.appHelper.getLeftSideBarWidth());
                const viewWidth = markdownView.containerEl.parentElement.offsetWidth;
                const x = Math.min(viewPadLeft + viewWidth / 1.5, windowWidth - modalWidth - 30);
                promptEl === null || promptEl === void 0 ? void 0 : promptEl.setAttribute("style", `left: ${x}px`);
            }
        }
        const markdownView = this.appHelper.getMarkdownViewInActiveLeaf();
        if (!markdownView || this.items.length === 0) {
            return;
        }
        const mode = markdownView.getMode();
        const offset = mode === "source"
            ? this.appHelper.getCurrentOffset()
            : markdownView.editor.posToOffset({
                ch: 0,
                line: markdownView.previewMode.getScroll(),
            });
        if (!offset) {
            return;
        }
        const firstOverIndex = this.items.findIndex((x) => x.position.start.offset > offset);
        if (firstOverIndex === -1) {
            this.select(this.items.last().index, false);
        }
        else if (firstOverIndex === 0) {
            this.select(0, false);
        }
        else {
            this.select(firstOverIndex - 1, false);
        }
    }
    getSuggestions(query) {
        const qs = query.split(" ").filter((x) => x);
        const suggestions = this.items.map((x) => {
            const hit = qs.length > 0 &&
                qs.every((q) => smartIncludes(x.value, q, this.settings.normalizeAccentsAndDiacritics));
            return Object.assign(Object.assign({}, x), { hit });
        });
        this.hitItems = suggestions.filter((x) => x.hit);
        return suggestions;
    }
    renderSuggestion(item, el) {
        const itemDiv = createDiv({
            cls: "another-quick-switcher__item",
        });
        const entryDiv = createDiv({
            cls: "another-quick-switcher__item__entry",
        });
        const headerDiv = createDiv({
            cls: [
                "another-quick-switcher__item__title",
                `another-quick-switcher__item__title__header`,
                item.hit
                    ? `another-quick-switcher__item__title__header_hit`
                    : "another-quick-switcher__item__title__header_no_hit",
                `another-quick-switcher__item__title__header${item.level}`,
            ],
            text: item.value,
        });
        entryDiv.appendChild(headerDiv);
        if (item.hit) {
            const i = this.hitItems.findIndex((x) => x.index === item.index);
            if (i !== -1) {
                entryDiv.createSpan({
                    cls: "another-quick-switcher__item__title__header_hit__counter",
                    text: `${i + 1} / ${this.hitItems.length}`,
                });
            }
        }
        itemDiv.appendChild(entryDiv);
        el.appendChild(itemDiv);
    }
    onChooseSuggestion(item) {
        return __awaiter(this, void 0, void 0, function* () {
            this.appHelper.moveTo(item.position);
        });
    }
    bindHotKeys() {
        this.setInstructions([
            {
                command: "[↑↓]",
                purpose: this.settings.headerSearchKeyBindArrowUpDown,
            },
            {
                command: "[tab or shift tab]",
                purpose: this.settings.headerSearchKeyBindTab,
            },
            {
                command: `[${MOD} j or k]`,
                purpose: this.settings.headerSearchKeyBindVim,
            },
            {
                command: `[${MOD} n or p]`,
                purpose: this.settings.headerSearchKeyBindEmacs,
            },
            { command: `[${MOD} d]`, purpose: "clear input" },
            { command: "[↵]", purpose: "move to header" },
            { command: "[esc]", purpose: "dismiss" },
        ]);
        this.scope.register(["Mod"], "D", () => {
            this.inputEl.value = "";
            // Necessary to rerender suggestions
            this.inputEl.dispatchEvent(new Event("input"));
        });
        this.scope.keys
            .filter((x) => ["ArrowDown", "ArrowUp"].includes(x.key))
            .forEach((x) => this.scope.unregister(x));
        const navigateNext = () => {
            this.select(this.getNextSelectIndex(), this.floating);
        };
        const navigatePrevious = () => {
            this.select(this.getPreviousSelectIndex(), this.floating);
        };
        const moveToNextHit = () => {
            var _a, _b;
            if (this.hitItems.length === 1) {
                return;
            }
            if (this.hitItems.length === 0) {
                navigateNext();
                return;
            }
            const nextIndex = (_b = (_a = this.hitItems.find((x) => x.index > this.unsafeSelectedIndex)) === null || _a === void 0 ? void 0 : _a.index) !== null && _b !== void 0 ? _b : this.hitItems[0].index;
            this.select(nextIndex, this.floating);
        };
        const moveToPreviousHit = () => {
            if (this.hitItems.length === 1) {
                return;
            }
            if (this.hitItems.length === 0) {
                navigatePrevious();
                return;
            }
            const currentIndex = this.hitItems.findIndex((x) => x.index >= this.unsafeSelectedIndex);
            const previousIndex = currentIndex === 0 ? this.hitItems.length - 1 : currentIndex - 1;
            this.select(this.hitItems[previousIndex].index, this.floating);
        };
        this.scope.register([], "ArrowDown", () => {
            (this.settings.headerSearchKeyBindArrowUpDown === "navigate"
                ? navigateNext
                : moveToNextHit)();
        });
        this.scope.register([], "ArrowUp", () => {
            (this.settings.headerSearchKeyBindArrowUpDown === "navigate"
                ? navigatePrevious
                : moveToPreviousHit)();
        });
        this.scope.register(["Mod"], "J", () => {
            (this.settings.headerSearchKeyBindVim === "navigate"
                ? navigateNext
                : moveToNextHit)();
        });
        this.scope.register(["Mod"], "K", () => {
            (this.settings.headerSearchKeyBindVim === "navigate"
                ? navigatePrevious
                : moveToPreviousHit)();
        });
        this.scope.register(["Mod"], "N", () => {
            (this.settings.headerSearchKeyBindEmacs === "navigate"
                ? navigateNext
                : moveToNextHit)();
        });
        this.scope.register(["Mod"], "P", () => {
            (this.settings.headerSearchKeyBindEmacs === "navigate"
                ? navigatePrevious
                : moveToPreviousHit)();
        });
        this.scope.register([], "Tab", (evt) => {
            evt.preventDefault();
            (this.settings.headerSearchKeyBindTab === "navigate"
                ? navigateNext
                : moveToNextHit)();
        });
        this.scope.register(["Shift"], "Tab", (evt) => {
            evt.preventDefault();
            (this.settings.headerSearchKeyBindTab === "navigate"
                ? navigatePrevious
                : moveToPreviousHit)();
        });
    }
}

function showSearchDialog(app, mode, settings) {
    const modal = new AnotherQuickSwitcherModal(app, mode, settings);
    modal.open();
}
function showMoveDialog(app, settings) {
    if (!app.workspace.getActiveFile()) {
        return;
    }
    const modal = new MoveModal(app, settings);
    modal.open();
}
function showHeaderDialog(app, settings, floating) {
    if (!app.workspace.getActiveFile()) {
        return;
    }
    const modal = new HeaderModal(app, settings, floating);
    modal.open();
}
function createCommands(app, settings) {
    return [
        {
            id: "normal-search",
            name: "Normal search",
            hotkeys: [{ modifiers: ["Mod", "Shift"], key: "p" }],
            callback: () => {
                showSearchDialog(app, "normal", settings);
            },
        },
        {
            id: "recommended-recent-search",
            name: "Recommended recent search",
            hotkeys: [],
            callback: () => {
                showSearchDialog(app, "recommended-recent", settings);
            },
        },
        {
            id: "recent-search",
            name: "Recent search",
            hotkeys: [{ modifiers: ["Mod", "Shift"], key: "e" }],
            callback: () => {
                showSearchDialog(app, "recent", settings);
            },
        },
        {
            id: "filename-recent-search",
            name: "Filename recent search",
            hotkeys: [{ modifiers: ["Mod", "Shift"], key: "f" }],
            callback: () => {
                showSearchDialog(app, "filename-recent", settings);
            },
        },
        {
            id: "star-recent-search",
            name: "Star recent search",
            hotkeys: [],
            callback: () => {
                showSearchDialog(app, "star-recent", settings);
            },
        },
        {
            id: "backlink-search",
            name: "Backlink search",
            hotkeys: [{ modifiers: ["Mod", "Shift"], key: "h" }],
            checkCallback: (checking) => {
                if (checking) {
                    return Boolean(app.workspace.getActiveFile());
                }
                showSearchDialog(app, "backlink", settings);
            },
        },
        {
            id: "header-search-in-file",
            name: "Header search in file",
            checkCallback: (checking) => {
                if (checking) {
                    return Boolean(app.workspace.getActiveFile());
                }
                showHeaderDialog(app, settings, false);
            },
        },
        {
            id: "header-floating-search-in-file",
            name: "Header floating search in file",
            checkCallback: (checking) => {
                if (checking) {
                    return Boolean(app.workspace.getActiveFile());
                }
                showHeaderDialog(app, settings, true);
            },
        },
        {
            id: "move",
            name: "Move file to another folder",
            hotkeys: [{ modifiers: ["Mod", "Shift"], key: "m" }],
            checkCallback: (checking) => {
                if (checking) {
                    return Boolean(app.workspace.getActiveFile());
                }
                showMoveDialog(app, settings);
            },
        },
    ];
}

const headerSearchFeatureList = [
    "navigate",
    "move to next/previous hit",
];
const DEFAULT_SETTINGS = {
    searchFromHeaders: true,
    searchByLinks: false,
    searchDelayMilliSeconds: 0,
    showDirectory: true,
    showDirectoryAtNewLine: false,
    showFullPathOfDirectory: false,
    showAliasesOnTop: false,
    showExistingFilesOnly: false,
    maxNumberOfSuggestions: 50,
    normalizeAccentsAndDiacritics: false,
    hideGutterIcons: false,
    userAltInsteadOfModForQuickResultSelection: false,
    // Normal search
    ignoreNormalPathPrefixPatterns: "",
    // Recent search
    ignoreRecentPathPrefixPatterns: "",
    // File name recent search
    ignoreFilenameRecentPathPrefixPatterns: "",
    // Back link search
    ignoreBackLinkPathPrefixPatterns: "",
    // Header search in file
    headerSearchKeyBindArrowUpDown: "navigate",
    headerSearchKeyBindTab: "move to next/previous hit",
    headerSearchKeyBindVim: "navigate",
    headerSearchKeyBindEmacs: "navigate",
    // Move file to another folder
    ignoreMoveFileToAnotherFolderPrefixPatterns: "",
    // debug
    showLogAboutPerformanceInConsole: false,
};
class AnotherQuickSwitcherSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h2", { text: "Another Quick Switcher - Settings" });
        new obsidian.Setting(containerEl).setName("Search by headers").addToggle((tc) => {
            tc.setValue(this.plugin.settings.searchFromHeaders).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.searchFromHeaders = value;
                yield this.plugin.saveSettings();
                this.display();
            }));
        });
        if (this.plugin.settings.searchFromHeaders) {
            containerEl.createEl("div", {
                text: "⚠ If enabled, it is slower than disabled",
                cls: "another-quick-switcher__settings__warning",
            });
        }
        new obsidian.Setting(containerEl).setName("Search by links").addToggle((tc) => {
            tc.setValue(this.plugin.settings.searchByLinks).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.searchByLinks = value;
                yield this.plugin.saveSettings();
                this.display();
            }));
        });
        if (this.plugin.settings.searchByLinks) {
            containerEl.createEl("div", {
                text: "⚠ If enabled, it is slower than disabled",
                cls: "another-quick-switcher__settings__warning",
            });
        }
        new obsidian.Setting(containerEl)
            .setName("Search delay milli-seconds")
            .setDesc("If keyboard operation is slow, try increasing the value")
            .addSlider((sc) => sc
            .setLimits(0, 1000, 10)
            .setValue(this.plugin.settings.searchDelayMilliSeconds)
            .setDynamicTooltip()
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.searchDelayMilliSeconds = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Max number of suggestions")
            .addSlider((sc) => sc
            .setLimits(1, 255, 1)
            .setValue(this.plugin.settings.maxNumberOfSuggestions)
            .setDynamicTooltip()
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.maxNumberOfSuggestions = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Normalize accents/diacritics")
            .addToggle((tc) => {
            tc.setValue(this.plugin.settings.normalizeAccentsAndDiacritics).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.normalizeAccentsAndDiacritics = value;
                yield this.plugin.saveSettings();
                this.display();
            }));
        });
        if (this.plugin.settings.normalizeAccentsAndDiacritics) {
            containerEl.createEl("div", {
                text: "⚠ If enabled, it is about 2 to 5 times slower than disabled",
                cls: "another-quick-switcher__settings__warning",
            });
        }
        containerEl.createEl("h3", { text: "👁Appearance" });
        new obsidian.Setting(containerEl).setName("Show directory").addToggle((tc) => {
            tc.setValue(this.plugin.settings.showDirectory).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.showDirectory = value;
                yield this.plugin.saveSettings();
                this.display();
            }));
        });
        if (this.plugin.settings.showDirectory) {
            new obsidian.Setting(containerEl)
                .setName("Show directory at the new line")
                .setClass("another-quick-switcher__settings__nested")
                .addToggle((tc) => {
                tc.setValue(this.plugin.settings.showDirectoryAtNewLine).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.showDirectoryAtNewLine = value;
                    yield this.plugin.saveSettings();
                }));
            });
            new obsidian.Setting(containerEl)
                .setName("Show full path of directory")
                .setClass("another-quick-switcher__settings__nested")
                .addToggle((tc) => {
                tc.setValue(this.plugin.settings.showFullPathOfDirectory).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.showFullPathOfDirectory = value;
                    yield this.plugin.saveSettings();
                }));
            });
        }
        new obsidian.Setting(containerEl).setName("Show aliases on top").addToggle((tc) => {
            tc.setValue(this.plugin.settings.showAliasesOnTop).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.showAliasesOnTop = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Show existing files only")
            .addToggle((tc) => {
            tc.setValue(this.plugin.settings.showExistingFilesOnly).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.showExistingFilesOnly = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl).setName("Hide gutter icons").addToggle((tc) => {
            tc.setValue(this.plugin.settings.hideGutterIcons).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.hideGutterIcons = value;
                yield this.plugin.saveSettings();
            }));
        });
        containerEl.createEl("h3", { text: "⌨Hot keys in dialog" });
        new obsidian.Setting(containerEl)
            .setName("Use `alt 1～9` instead of `ctrl/cmd 1～9` for quick result selection")
            .addToggle((tc) => {
            tc.setValue(this.plugin.settings.userAltInsteadOfModForQuickResultSelection).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.userAltInsteadOfModForQuickResultSelection =
                    value;
                yield this.plugin.saveSettings();
            }));
        });
        containerEl.createEl("h3", { text: "🔍 Normal search" });
        new obsidian.Setting(containerEl)
            .setName("Ignore prefix path patterns for Normal search")
            .addTextArea((tc) => {
            const el = tc
                .setPlaceholder("Prefix match patterns")
                .setValue(this.plugin.settings.ignoreNormalPathPrefixPatterns)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.ignoreNormalPathPrefixPatterns = value;
                yield this.plugin.saveSettings();
            }));
            el.inputEl.className =
                "another-quick-switcher__settings__ignore_path_patterns";
            return el;
        });
        containerEl.createEl("h3", { text: "⏱ Recent search" });
        new obsidian.Setting(containerEl)
            .setName("Ignore prefix path patterns for Recent search")
            .addTextArea((tc) => {
            const el = tc
                .setPlaceholder("Prefix match patterns")
                .setValue(this.plugin.settings.ignoreRecentPathPrefixPatterns)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.ignoreRecentPathPrefixPatterns = value;
                yield this.plugin.saveSettings();
            }));
            el.inputEl.className =
                "another-quick-switcher__settings__ignore_path_patterns";
            return el;
        });
        containerEl.createEl("h3", { text: "⏱ Filename recent search" });
        new obsidian.Setting(containerEl)
            .setName("Ignore prefix path patterns for Filename Recent search")
            .addTextArea((tc) => {
            const el = tc
                .setPlaceholder("Prefix match patterns")
                .setValue(this.plugin.settings.ignoreFilenameRecentPathPrefixPatterns)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.ignoreFilenameRecentPathPrefixPatterns = value;
                yield this.plugin.saveSettings();
            }));
            el.inputEl.className =
                "another-quick-switcher__settings__ignore_path_patterns";
            return el;
        });
        containerEl.createEl("h3", { text: "👀 Backlink search" });
        new obsidian.Setting(containerEl)
            .setName("Ignore prefix path patterns for Backlink search")
            .addTextArea((tc) => {
            const el = tc
                .setPlaceholder("Prefix match patterns")
                .setValue(this.plugin.settings.ignoreBackLinkPathPrefixPatterns)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.ignoreBackLinkPathPrefixPatterns = value;
                yield this.plugin.saveSettings();
            }));
            el.inputEl.className =
                "another-quick-switcher__settings__ignore_path_patterns";
            return el;
        });
        containerEl.createEl("h3", { text: "📰 Header search in file" });
        containerEl.createEl("h4", { text: "Hot keys in dialog" });
        new obsidian.Setting(containerEl).setName("↑↓").addDropdown((tc) => tc
            .addOptions(mirrorMap([...headerSearchFeatureList], (x) => x))
            .setValue(this.plugin.settings.headerSearchKeyBindArrowUpDown)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.headerSearchKeyBindArrowUpDown =
                value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl).setName("Tab / Shift+Tab").addDropdown((tc) => tc
            .addOptions(mirrorMap([...headerSearchFeatureList], (x) => x))
            .setValue(this.plugin.settings.headerSearchKeyBindTab)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.headerSearchKeyBindTab =
                value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Ctrl+J / Ctrl+K (for Vimmer)")
            .addDropdown((tc) => tc
            .addOptions(mirrorMap([...headerSearchFeatureList], (x) => x))
            .setValue(this.plugin.settings.headerSearchKeyBindVim)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.headerSearchKeyBindVim =
                value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Ctrl+N / Ctrl+P (for Emacs user)")
            .addDropdown((tc) => tc
            .addOptions(mirrorMap([...headerSearchFeatureList], (x) => x))
            .setValue(this.plugin.settings.headerSearchKeyBindEmacs)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.headerSearchKeyBindEmacs =
                value;
            yield this.plugin.saveSettings();
        })));
        containerEl.createEl("h3", { text: "📁 Move file to another folder" });
        new obsidian.Setting(containerEl)
            .setName("Ignore prefix path patterns for Move file to another folder")
            .addTextArea((tc) => {
            const el = tc
                .setPlaceholder("Prefix match patterns")
                .setValue(this.plugin.settings.ignoreMoveFileToAnotherFolderPrefixPatterns)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.ignoreMoveFileToAnotherFolderPrefixPatterns =
                    value;
                yield this.plugin.saveSettings();
            }));
            el.inputEl.className =
                "another-quick-switcher__settings__ignore_path_patterns";
            return el;
        });
        containerEl.createEl("h3", { text: "Debug" });
        new obsidian.Setting(containerEl)
            .setName("Show log about performance in a console")
            .addToggle((tc) => {
            tc.setValue(this.plugin.settings.showLogAboutPerformanceInConsole).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.showLogAboutPerformanceInConsole = value;
                yield this.plugin.saveSettings();
            }));
        });
    }
}

class AnotherQuickSwitcher extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addSettingTab(new AnotherQuickSwitcherSettingTab(this.app, this));
            createCommands(this.app, this.settings).forEach((x) => this.addCommand(x));
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign(Object.assign({}, DEFAULT_SETTINGS), (yield this.loadData()));
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = AnotherQuickSwitcher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
