<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>On/Computer_Science/Algorithms on</title><link>https://braden-w.github.io/quartz/tags/On/Computer_Science/Algorithms/</link><description>Recent content in On/Computer_Science/Algorithms on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://braden-w.github.io/quartz/tags/On/Computer_Science/Algorithms/index.xml" rel="self" type="application/rss+xml"/><item><title>The Traveling Salesman Problem - When Good Enough Beats Perfect</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/The-Traveling-Salesman-Problem-When-Good-Enough-Beats-Perfect/</link><pubDate>Mon, 15 Aug 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/The-Traveling-Salesman-Problem-When-Good-Enough-Beats-Perfect/</guid><description>The Traveling Salesman Problem - When Good Enough Beats Perfect Approach: [[Good Enough]]. Finds a reasonably good solution. Problem is [[NP Hard]].</description></item><item><title>Big-O Algorithm Complexity Cheat Sheet (Know Thy Complexities!) @ericdrowell</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Big-O-Algorithm-Complexity-Cheat-Sheet-Know-Thy-Complexities-ericdrowell/</link><pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Big-O-Algorithm-Complexity-Cheat-Sheet-Know-Thy-Complexities-ericdrowell/</guid><description>Big-O Algorithm Complexity Cheat Sheet (Know Thy Complexities!) @ericdrowell References (References:: Big-O Algorithm Complexity Cheat Sheet (Know Thy Complexities!) @ericdrowell)</description></item><item><title>Binary Tree Traversal</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Binary-Tree-Traversal/</link><pubDate>Fri, 24 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Binary-Tree-Traversal/</guid><description>Binary Tree Traversal References (References:: Binary tree traversal - breadth-first and depth-first strategies - YouTube)</description></item><item><title>Cut</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Cut/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Cut/</guid><description>Cut Splits graph into two disjoint subsets. An $s-t$ cut splits $V$ into $V=A \cup B$ such that $s\in A$, $t\in B$, and $s \cap t = \emptyset$.</description></item><item><title>Floyd's Cycle Finding Algorithm (Two Runners at Different Speeds)</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Floyds-Cycle-Finding-Algorithm-Two-Runners-at-Different-Speeds/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Floyds-Cycle-Finding-Algorithm-Two-Runners-at-Different-Speeds/</guid><description>Floyd&amp;rsquo;s Cycle Finding Algorithm (Two Runners at Different Speeds)</description></item><item><title>Ford-Fulkerson</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Ford-Fulkerson/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Ford-Fulkerson/</guid><description>Ford-Fulkerson Continually add [[Augmenting Path]]s to increase the maximum flow from the [[Flow Networks#Source]] to the [[Flow Networks#Sink]].
Find a path Compute bottleneck capacity Augment path Upon each iteration, we are guaranteed to increase max flow at least one.</description></item><item><title>It’s Not Just Speed (Fast Machines Just Gives You the Wrong Answer More Quickly)</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Its-Not-Just-Speed-Fast-Machines-Just-Gives-You-the-Wrong-Answer-More-Quickly/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Its-Not-Just-Speed-Fast-Machines-Just-Gives-You-the-Wrong-Answer-More-Quickly/</guid><description>It’s Not Just Speed (Fast Machines Just Gives You the Wrong Answer More Quickly) References (References:: [[Human Compatible]])</description></item><item><title>Kadane's Algorithm</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Kadanes-Algorithm/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Kadanes-Algorithm/</guid><description>Kadane&amp;rsquo;s Algorithm 1 2 3 4 5 6 7 8 def max_subarray(numbers): &amp;#34;&amp;#34;&amp;#34;Find the largest sum of any contiguous subarray.</description></item><item><title>Quantum Bogosort</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Permanent-Notes/Quantum-Bogosort/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Permanent-Notes/Quantum-Bogosort/</guid><description>Quantum Bogosort Quantum bogosort is a hypothetical sorting algorithm based on bogosort, created as an in-joke among computer scientists. The algorithm generates a random permutation of its input using a quantum source of entropy, checks if the list is sorted, and, if it is not, destroys the universe.</description></item><item><title>The Man Who Revolutionized Computer Science with Math</title><link>https://braden-w.github.io/quartz/obsidian/Sources/Videos/The-Man-Who-Revolutionized-Computer-Science-with-Math/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Sources/Videos/The-Man-Who-Revolutionized-Computer-Science-with-Math/</guid><description>The Man Who Revolutionized Computer Science with Math [[Distributed Systems]] and its relationship with [[Special Relativity]] [[Coding is to Programming Like Typing is to Writing]]</description></item></channel></rss>