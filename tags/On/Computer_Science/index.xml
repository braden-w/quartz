<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>On/Computer_Science on</title><link>https://braden-w.github.io/quartz/tags/On/Computer_Science/</link><description>Recent content in On/Computer_Science on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://braden-w.github.io/quartz/tags/On/Computer_Science/index.xml" rel="self" type="application/rss+xml"/><item><title>The Traveling Salesman Problem - When Good Enough Beats Perfect</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/The-Traveling-Salesman-Problem-When-Good-Enough-Beats-Perfect/</link><pubDate>Mon, 15 Aug 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/The-Traveling-Salesman-Problem-When-Good-Enough-Beats-Perfect/</guid><description>The Traveling Salesman Problem - When Good Enough Beats Perfect Approach: [[Good Enough]]. Finds a reasonably good solution. Problem is [[NP Hard]].</description></item><item><title>Stanford Computer Science is Broken - YouTube</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Stanford-Computer-Science-is-Broken-YouTube/</link><pubDate>Mon, 25 Jul 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Stanford-Computer-Science-is-Broken-YouTube/</guid><description>Stanford Computer Science is Broken - YouTube [[(Inspired by) Casually Explained - Stanford - YouTube]]
References (References:: Stanford Computer Science is Broken - YouTube)</description></item><item><title>For Better or Worse, Benchmarks Shape a field.</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Quotes/For-Better-or-Worse-Benchmarks-Shape-a-field./</link><pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Quotes/For-Better-or-Worse-Benchmarks-Shape-a-field./</guid><description>For Better or Worse, Benchmarks Shape a Field.</description></item><item><title>Big-O Algorithm Complexity Cheat Sheet (Know Thy Complexities!) @ericdrowell</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Big-O-Algorithm-Complexity-Cheat-Sheet-Know-Thy-Complexities-ericdrowell/</link><pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Big-O-Algorithm-Complexity-Cheat-Sheet-Know-Thy-Complexities-ericdrowell/</guid><description>Big-O Algorithm Complexity Cheat Sheet (Know Thy Complexities!) @ericdrowell References (References:: Big-O Algorithm Complexity Cheat Sheet (Know Thy Complexities!) @ericdrowell)</description></item><item><title>CPSC 201</title><link>https://braden-w.github.io/quartz/obsidian/Sources/Courses/CPSC-201/</link><pubDate>Sat, 25 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Sources/Courses/CPSC-201/</guid><description>CPSC 201 [[2020-09-20]] Learning Racket examples (+)―0 +―# procedure:+ Lists Types empty list (list )→&amp;rsquo;() flat lists (list &amp;lsquo;a &amp;lsquo;b &amp;lsquo;c)→&amp;rsquo;(a b c) don&amp;rsquo;t use quotes when you want evaluation of list (list 1 2 (* 9 8) #t quotient 'candy)→'(1 2 72 #t &amp;lt;#procedure:quotient&amp;gt; candy) non-flat lists ('a b (2 c))→'(a b (2 c)) (list 1 2 (* 9 8) (list #t #f '(a b c)))→'(1 2 72 (#t #f (a b c))) pairs produced when→(cons ) is called on only two object visualized→ why use &amp;rsquo; in lists &amp;lsquo;(1 2 3 4)→so first item is not interpreted as an operator Procedures can be arguments for procedures functions Lists cons (cons 1 &amp;lsquo;(2 3 4))→(1 2 3 4) append difference vs.</description></item><item><title>Binary Tree Traversal</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Binary-Tree-Traversal/</link><pubDate>Fri, 24 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Binary-Tree-Traversal/</guid><description>Binary Tree Traversal References (References:: Binary tree traversal - breadth-first and depth-first strategies - YouTube)</description></item><item><title>Computer Science and Psychology</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Computer-Science-and-Psychology/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Computer-Science-and-Psychology/</guid><description>Computer Science and Psychology</description></item><item><title>Cut</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Cut/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Cut/</guid><description>Cut Splits graph into two disjoint subsets. An $s-t$ cut splits $V$ into $V=A \cup B$ such that $s\in A$, $t\in B$, and $s \cap t = \emptyset$.</description></item><item><title>Cut</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Cut/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Cut/</guid><description>Cut Splits graph into two disjoint subsets. An $s-t$ cut splits $V$ into $V=A \cup B$ such that $s\in A$, $t\in B$, and $s \cap t = \emptyset$.</description></item><item><title>Floyd's Cycle Finding Algorithm (Two Runners at Different Speeds)</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Floyds-Cycle-Finding-Algorithm-Two-Runners-at-Different-Speeds/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Floyds-Cycle-Finding-Algorithm-Two-Runners-at-Different-Speeds/</guid><description>Floyd&amp;rsquo;s Cycle Finding Algorithm (Two Runners at Different Speeds)</description></item><item><title>Ford-Fulkerson</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Ford-Fulkerson/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Ford-Fulkerson/</guid><description>Ford-Fulkerson Continually add [[Augmenting Path]]s to increase the maximum flow from the [[Flow Networks#Source]] to the [[Flow Networks#Sink]].
Find a path Compute bottleneck capacity Augment path Upon each iteration, we are guaranteed to increase max flow at least one.</description></item><item><title>It’s Not Just Speed (Fast Machines Just Gives You the Wrong Answer More Quickly)</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Its-Not-Just-Speed-Fast-Machines-Just-Gives-You-the-Wrong-Answer-More-Quickly/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Its-Not-Just-Speed-Fast-Machines-Just-Gives-You-the-Wrong-Answer-More-Quickly/</guid><description>It’s Not Just Speed (Fast Machines Just Gives You the Wrong Answer More Quickly) References (References:: [[Human Compatible]])</description></item><item><title>James Gosling - Java, JVM, Emacs, and the Early Days of Computing</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/James-Gosling-Java-JVM-Emacs-and-the-Early-Days-of-Computing/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/James-Gosling-Java-JVM-Emacs-and-the-Early-Days-of-Computing/</guid><description>James Gosling - Java, JVM, Emacs, and the Early Days of Computing [[Open Source Should Not Be a Vow of Poverty]]</description></item><item><title>Kadane's Algorithm</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Kadanes-Algorithm/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Kadanes-Algorithm/</guid><description>Kadane&amp;rsquo;s Algorithm 1 2 3 4 5 6 7 8 def max_subarray(numbers): &amp;#34;&amp;#34;&amp;#34;Find the largest sum of any contiguous subarray.</description></item><item><title>Max Flow Rate</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Max-Flow-Rate/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Max-Flow-Rate/</guid><description>Max Flow Rate Related to [[Ford-Fulkerson]], [[Flow Problems]], [[Flow Networks]], and [[Max-Flow Min-Cut Theorem]]
The maximum amount of flow passing from the source to the sink.</description></item><item><title>NP Complete</title><link>https://braden-w.github.io/quartz/obsidian/Sources/Courses/CPSC-365/NP-Complete/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Sources/Courses/CPSC-365/NP-Complete/</guid><description>NP Complete Both [[NP]] and [[NP Hard]].</description></item><item><title>Quantum Bogosort</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Permanent-Notes/Quantum-Bogosort/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Permanent-Notes/Quantum-Bogosort/</guid><description>Quantum Bogosort Quantum bogosort is a hypothetical sorting algorithm based on bogosort, created as an in-joke among computer scientists. The algorithm generates a random permutation of its input using a quantum source of entropy, checks if the list is sorted, and, if it is not, destroys the universe.</description></item><item><title>Skip Core CS Classes (Just Take [[CPSC 365]] and Skip [[CPSC 202]])</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Permanent-Notes/Skip-Core-CS-Classes-Just-Take-CPSC-365-and-Skip-CPSC-202/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Permanent-Notes/Skip-Core-CS-Classes-Just-Take-CPSC-365-and-Skip-CPSC-202/</guid><description>Skip Core CS Classes (Just Take [[CPSC 365]] and Skip [[CPSC 202]]) References (References:: Courses in the Computer Science major / Frequently Asked Questions)</description></item><item><title>The Man Who Revolutionized Computer Science with Math</title><link>https://braden-w.github.io/quartz/obsidian/Sources/Videos/The-Man-Who-Revolutionized-Computer-Science-with-Math/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Sources/Videos/The-Man-Who-Revolutionized-Computer-Science-with-Math/</guid><description>The Man Who Revolutionized Computer Science with Math [[Distributed Systems]] and its relationship with [[Special Relativity]] [[Coding is to Programming Like Typing is to Writing]]</description></item><item><title>The Man Who Revolutionized Computer Science with Math</title><link>https://braden-w.github.io/quartz/obsidian/Sources/Videos/The-Man-Who-Revolutionized-Computer-Science-with-Math/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Sources/Videos/The-Man-Who-Revolutionized-Computer-Science-with-Math/</guid><description>The Man Who Revolutionized Computer Science with Math [[Distributed Systems]] and its relationship with [[Special Relativity]] [[Coding is to Programming Like Typing is to Writing]]</description></item><item><title>You Don't Need to Be Computer Science Major for Software Engineering</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Permanent-Notes/You-Dont-Need-to-Be-Computer-Science-Major-for-Software-Engineering/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Permanent-Notes/You-Dont-Need-to-Be-Computer-Science-Major-for-Software-Engineering/</guid><description>You Don&amp;rsquo;t Need to Be Computer Science Major for Software Engineering</description></item><item><title>Coding is to Programming Like Typing is to Writing</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Coding-is-to-Programming-Like-Typing-is-to-Writing/</link><pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Coding-is-to-Programming-Like-Typing-is-to-Writing/</guid><description>Coding is to Programming Like Typing is to Writing Writing requires mental effort. The words have some importance, but even they are secondary to the ideas that are being expressed.</description></item><item><title>Google Has Seats Reserved in Universities That They Can Reserve You</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Google-Has-Seats-Reserved-in-Universities-That-They-Can-Reserve-You/</link><pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Google-Has-Seats-Reserved-in-Universities-That-They-Can-Reserve-You/</guid><description>Google Has Seats Reserved in Universities That They Can Reserve You Related To: [[Master&amp;rsquo;s Degree]],
References (References:: Talking with Tucker about Eisenstat)</description></item><item><title>Distributed Systems</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Permanent-Notes/Distributed-Systems/</link><pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Permanent-Notes/Distributed-Systems/</guid><description>Distributed Systems Your computer can be rendered useless by a failure of a computer you didn&amp;rsquo;t even know existed. Communicate through sending messages A system where all systems need to be synchronized so processes see data consistently</description></item><item><title>Intractable Problems</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Intractable-Problems/</link><pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Intractable-Problems/</guid><description>Intractable Problems Problems for which there exist no efficient algorithms to solve them</description></item></channel></rss>