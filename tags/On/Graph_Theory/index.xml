<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>On/Graph_Theory on</title><link>https://braden-w.github.io/quartz/tags/On/Graph_Theory/</link><description>Recent content in On/Graph_Theory on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://braden-w.github.io/quartz/tags/On/Graph_Theory/index.xml" rel="self" type="application/rss+xml"/><item><title>Obsidian is a Way of Mapping What You Know</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Obsidian-is-a-Way-of-Mapping-What-You-Know/</link><pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Obsidian-is-a-Way-of-Mapping-What-You-Know/</guid><description>Obsidian is a Way of Mapping What You Know There is an infinite number of things you don&amp;rsquo;t know, but a finite number of things you do know.</description></item><item><title>Bipartite Graph</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Bipartite-Graph/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Bipartite-Graph/</guid><description>Bipartite Graph Graph where points can be partitioned in disjoint sets.</description></item><item><title>Breadth First Search (BFS)</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Breadth-First-Search-BFS/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Breadth-First-Search-BFS/</guid><description>Breadth First Search (BFS) Related To: , [[Depth First Search (DFS)]],
Uses [[Queue]]</description></item><item><title>Clique</title><link>https://braden-w.github.io/quartz/obsidian/Sources/Courses/CPSC-365/Clique/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Sources/Courses/CPSC-365/Clique/</guid><description>Clique All points are pairwise connected</description></item><item><title>Cut</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Cut/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Cut/</guid><description>Cut Splits graph into two disjoint subsets. An $s-t$ cut splits $V$ into $V=A \cup B$ such that $s\in A$, $t\in B$, and $s \cap t = \emptyset$.</description></item><item><title>Depth First Search (DFS)</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Depth-First-Search-DFS/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Depth-First-Search-DFS/</guid><description>Depth First Search (DFS) Related To: , [[Breadth First Search (BFS)]],
Uses [[Stack]] or [[Priority Queue]]</description></item><item><title>Dijkstra's Algorithm</title><link>https://braden-w.github.io/quartz/obsidian/Sources/Courses/CPSC-365/Dijkstras-Algorithm/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Sources/Courses/CPSC-365/Dijkstras-Algorithm/</guid><description>Dijkstra&amp;rsquo;s Algorithm What&amp;rsquo;s Dijkstra&amp;rsquo;s relationship to water? It&amp;rsquo;s like how water goes through pipes In Pseudocode Set all vertices to infinity, and their previous to empty Set distance to root node to 0 Known region initialized as empty While the known region is not the whole whole region: Grow it using minimum distance dist[v] (add new point to R) for all adjacent vertices to v, if the distance is In Code for all $v\in V$ , $dist[v] = \infty$, $prev[v] = null$ dist[s] = 0 (of root node) $R={}$ while R !</description></item><item><title>Flow Problems</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Flow-Problems/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Flow-Problems/</guid><description>Flow Problems A class of [[Optimization Problems]] that can be solved using the [[Max-Flow Min-Cut Theorem]].</description></item><item><title>Ford-Fulkerson</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Ford-Fulkerson/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Ford-Fulkerson/</guid><description>Ford-Fulkerson Continually add [[Augmenting Path]]s to increase the maximum flow from the [[Flow Networks#Source]] to the [[Flow Networks#Sink]].
Find a path Compute bottleneck capacity Augment path Upon each iteration, we are guaranteed to increase max flow at least one.</description></item><item><title>Min Cut</title><link>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Min-Cut/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Cards/Fleeting-Notes/Min-Cut/</guid><description>Min Cut The minimum sum of weights of edges that when removed, makes a [[Cut]] between $s$ and $t$ .</description></item><item><title>Residual Graph</title><link>https://braden-w.github.io/quartz/obsidian/Residual-Graph/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://braden-w.github.io/quartz/obsidian/Residual-Graph/</guid><description>Residual Graph Example</description></item></channel></rss>